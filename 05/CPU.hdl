// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // ref: https://qiita.com/dgkz/items/437426b6b50f41e718c7
    // instruction[15]=0 -> A命令
    // instruction[15]=1 -> D命令

    // ARegister
    Not(in=instruction[15], out=isA);
    Mux16(a=ALUOut, b=instruction, sel=isA, out=AregIn);
    Or(a=isA, b=instruction[5], out=writeAreg);
    ARegister(in=AregIn, load=writeAreg, out=Areg, out[0..14]=addressM);


    // ALU
    And(a=instruction[15], b=instruction[12], out=useInM);
    Mux16(a=Areg, b=inM, sel=useInM, out=ALUin);
    ALU(x=Dreg, y=ALUin, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUOut, zr=ALUOutZr, ng=ALUOutNg);


    // DRegister
    And(a=instruction[15], b=instruction[4], out=saveDreg);
    DRegister(in=ALUOut, load=saveDreg, out=Dreg);


    // writeM
    And(a=instruction[15], b=instruction[3], out=writeM);


    // jump jadge
    // ALUOutZr -> out = 0
    // ALUOutNg -> out < 0
    // ALUOutPt -> out > 0
    Not(in=ALUOutZr, out=ALUOutNotZr);
    Not(in=ALUOutNg, out=ALUOutNotNg);
    And(a=ALUOutNotZr, b=ALUOutNotNg, out=ALUOutPt);

    // ifZr -> if out == 0
    // ifNg -> if out < 0
    // ifPt -> if out > 0
    And(a=instruction[15], b=instruction[0], out=ifPt);
    And(a=instruction[15], b=instruction[1], out=ifZr);
    And(a=instruction[15], b=instruction[2], out=ifNg);
    // ifNgEq -> if out <= 0
    // ifPtEq -> if out >= 0
    // ifNotEq -> if out != 0
    And(a=ifNg, b=ifZr, out=ifNgEq);
    And(a=ifPt, b=ifZr, out=ifPtEq);
    And(a=ifPt, b=ifNg, out=ifNotEq);

    And(a=ifNg, b=ALUOutNg, out=isJump0);
    And(a=ifZr, b=ALUOutZr, out=isJump1);
    And(a=ifPt, b=ALUOutPt, out=isJump2);
    And(a=ifNgEq, b=ALUOutNg, out=isJump3);
    And(a=ifNgEq, b=ALUOutZr, out=isJump4);
    And(a=ifPtEq, b=ALUOutPt, out=isJump5);
    And(a=ifPtEq, b=ALUOutZr, out=isJump6);
    And(a=ifNotEq, b=ALUOutNotZr, out=isJump7);
    // jmpAlways -> Always Jump
    And(a=ifNotEq, b=ifZr, out=jmpAlways);
    Or8Way(in[0]=isJump0, in[1]=isJump1, in[2]=isJump2, in[3]=isJump3, in[4]=isJump4, in[5]=isJump5, in[6]=isJump6, in[7]=isJump7, out=isJumpMatch);
    Or(a=isJumpMatch, b=jmpAlways, out=isJump);


    // PC
    PC(in=Areg, load=isJump, inc=true, reset=reset, out[0..14]=pc);
}